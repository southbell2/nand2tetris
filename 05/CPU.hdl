// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A-명령어
    //instruction의 최상위 비트가 0이면 A 명령어이다
    //ALU의 출력값과 instruction중 적절한 것을 선택한 뒤, 조건을 만족할때 A 레지스터에 입력한다
    Mux16(sel=instruction[15], a=instruction, b=outALU, out=muxA);
    Not(in=instruction[15], out=notins15);
    Or(a=notins15, b=instruction[5], out=loadA);
    ARegister(in=muxA, load=loadA, out=outA, out[0..14]=addressM);
    
    //C-명령어
    //ALU의 입력값으로 A,M중 하나를 선택한다
    Mux16(sel=instruction[12], b=inM, a=outA, out=outAM);
    //D 레지스터
    And(a=instruction[4], b=instruction[15], out=ins4);
    DRegister(in=outALU, load=ins4, out=outD);
    //ALU
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
    ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, 
    zr=checkzr, ng=checkng);
    //M에 입력할지 말지
    And(a=instruction[3], b=instruction[15], out=ins3);
    Or(a=false, b=ins3, out=writeM);
    
    //PC
    //ALU의 출력값이 양수인지 체크
    Or(a=checkzr, b=checkng, out=notcheckps);
    Not(in=notcheckps, out=checkps);
    //조건을 만족하면 점프한다
    And(a=checkng, b=instruction[2], out=jumpng);
    And(a=checkzr, b=instruction[1], out=jumpzr);
    And(a=checkps, b=instruction[0], out=jumpps);
    Or(a=jumpng, b=jumpzr, out=jumpor);
    Or(a=jumpor, b=jumpps, out=jump);
    And(a=jump, b=instruction[15], out=jumpout);
    PC(in=outA, inc=true, reset=reset, load=jumpout, out[0..14]=pc);
}
