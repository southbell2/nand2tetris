// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   Xor(a=x[0], b=x[0], out=zero);  
   Not(in=zero, out=one);
   
   //zx
   Mux16(a[15]=x[15],a[14]=x[14],a[13]=x[13],a[12]=x[12],a[11]=x[11],a[10]=x[10]
   ,a[9]=x[9],a[8]=x[8],a[7]=x[7],a[6]=x[6],a[5]=x[5],a[4]=x[4],a[3]=x[3]
   ,a[2]=x[2],a[1]=x[1],a[0]=x[0],
   b[15]=zero,b[14]=zero,b[13]=zero,b[12]=zero,b[11]=zero,b[10]=zero,b[9]=zero,
   b[8]=zero,b[7]=zero,b[6]=zero,b[5]=zero,b[4]=zero,b[3]=zero,b[2]=zero,
   b[1]=zero,b[0]=zero,sel=zx,
   out[15]=zx15,out[14]=zx14,out[13]=zx13,out[12]=zx12,out[11]=zx11,out[10]=zx10,
   out[9]=zx9,out[8]=zx8,out[7]=zx7,out[6]=zx6,out[5]=zx5,out[4]=zx4,
   out[3]=zx3,out[2]=zx2,out[1]=zx1,out[0]=zx0);
   
   //nx
   Not16(in[15]=zx15,in[14]=zx14,in[13]=zx13,in[12]=zx12,in[11]=zx11,in[10]=zx10,
   in[9]=zx9,in[8]=zx8,in[7]=zx7,in[6]=zx6,in[5]=zx5,in[4]=zx4,in[3]=zx3,
   in[2]=zx2,in[1]=zx1,in[0]=zx0,
   out[15]=nzx15,out[14]=nzx14,out[13]=nzx13,out[12]=nzx12,out[11]=nzx11,out[10]=nzx10,
   out[9]=nzx9,out[8]=nzx8,out[7]=nzx7,out[6]=nzx6,out[5]=nzx5,out[4]=nzx4,
   out[3]=nzx3,out[2]=nzx2,out[1]=nzx1,out[0]=nzx0);
   
   Mux16(sel=nx, b[15]=nzx15,b[14]=nzx14,b[13]=nzx13,b[12]=nzx12,b[11]=nzx11,b[10]=nzx10,
   b[9]=nzx9,b[8]=nzx8,b[7]=nzx7,b[6]=nzx6,b[5]=nzx5,b[4]=nzx4,b[3]=nzx3,b[2]=nzx2,
   b[1]=nzx1,b[0]=nzx0,
   a[15]=zx15,a[14]=zx14,a[13]=zx13,a[12]=zx12,a[11]=zx11,a[10]=zx10,
   a[9]=zx9,a[8]=zx8,a[7]=zx7,a[6]=zx6,a[5]=zx5,a[4]=zx4,
   a[3]=zx3,a[2]=zx2,a[1]=zx1,a[0]=zx0,
   out[15]=x15,out[14]=x14,out[13]=x13,out[12]=x12,out[11]=x11,out[10]=x10,
   out[9]=x9,out[8]=x8,out[7]=x7,out[6]=x6,out[5]=x5,out[4]=x4,
   out[3]=x3,out[2]=x2,out[1]=x1,out[0]=x0);
   
   //zy
   Mux16(a[15]=y[15],a[14]=y[14],a[13]=y[13],a[12]=y[12],a[11]=y[11],a[10]=y[10]
   ,a[9]=y[9],a[8]=y[8],a[7]=y[7],a[6]=y[6],a[5]=y[5],a[4]=y[4],a[3]=y[3]
   ,a[2]=y[2],a[1]=y[1],a[0]=y[0],
   b[15]=zero,b[14]=zero,b[13]=zero,b[12]=zero,b[11]=zero,b[10]=zero,b[9]=zero,
   b[8]=zero,b[7]=zero,b[6]=zero,b[5]=zero,b[4]=zero,b[3]=zero,b[2]=zero,
   b[1]=zero,b[0]=zero,sel=zy,
   out[15]=zy15,out[14]=zy14,out[13]=zy13,out[12]=zy12,out[11]=zy11,out[10]=zy10,
   out[9]=zy9,out[8]=zy8,out[7]=zy7,out[6]=zy6,out[5]=zy5,out[4]=zy4,
   out[3]=zy3,out[2]=zy2,out[1]=zy1,out[0]=zy0);
   
   //ny
   Not16(in[15]=zy15,in[14]=zy14,in[13]=zy13,in[12]=zy12,in[11]=zy11,in[10]=zy10,
   in[9]=zy9,in[8]=zy8,in[7]=zy7,in[6]=zy6,in[5]=zy5,in[4]=zy4,in[3]=zy3,
   in[2]=zy2,in[1]=zy1,in[0]=zy0,
   out[15]=nzy15,out[14]=nzy14,out[13]=nzy13,out[12]=nzy12,out[11]=nzy11,out[10]=nzy10,
   out[9]=nzy9,out[8]=nzy8,out[7]=nzy7,out[6]=nzy6,out[5]=nzy5,out[4]=nzy4,
   out[3]=nzy3,out[2]=nzy2,out[1]=nzy1,out[0]=nzy0);
   
   Mux16(sel=ny, b[15]=nzy15,b[14]=nzy14,b[13]=nzy13,b[12]=nzy12,b[11]=nzy11,b[10]=nzy10,
   b[9]=nzy9,b[8]=nzy8,b[7]=nzy7,b[6]=nzy6,b[5]=nzy5,b[4]=nzy4,b[3]=nzy3,b[2]=nzy2,
   b[1]=nzy1,b[0]=nzy0,
   a[15]=zy15,a[14]=zy14,a[13]=zy13,a[12]=zy12,a[11]=zy11,a[10]=zy10,
   a[9]=zy9,a[8]=zy8,a[7]=zy7,a[6]=zy6,a[5]=zy5,a[4]=zy4,
   a[3]=zy3,a[2]=zy2,a[1]=zy1,a[0]=zy0,
   out[15]=y15,out[14]=y14,out[13]=y13,out[12]=y12,out[11]=y11,out[10]=y10,
   out[9]=y9,out[8]=y8,out[7]=y7,out[6]=y6,out[5]=y5,out[4]=y4,
   out[3]=y3,out[2]=y2,out[1]=y1,out[0]=y0);
   
   //f
   Add16(a[15]=y15,a[14]=y14,a[13]=y13,a[12]=y12,a[11]=y11,a[10]=y10,
   a[9]=y9,a[8]=y8,a[7]=y7,a[6]=y6,a[5]=y5,a[4]=y4,
   a[3]=y3,a[2]=y2,a[1]=y1,a[0]=y0,
   b[15]=x15,b[14]=x14,b[13]=x13,b[12]=x12,b[11]=x11,b[10]=x10,
   b[9]=x9,b[8]=x8,b[7]=x7,b[6]=x6,b[5]=x5,b[4]=x4,
   b[3]=x3,b[2]=x2,b[1]=x1,b[0]=x0,
   out[15]=ff15,out[14]=ff14,out[13]=ff13,out[12]=ff12,out[11]=ff11,out[10]=ff10,
   out[9]=ff9,out[8]=ff8,out[7]=ff7,out[6]=ff6,out[5]=ff5,out[4]=ff4,
   out[3]=ff3,out[2]=ff2,out[1]=ff1,out[0]=ff0);
   
   And16(a[15]=y15,a[14]=y14,a[13]=y13,a[12]=y12,a[11]=y11,a[10]=y10,
   a[9]=y9,a[8]=y8,a[7]=y7,a[6]=y6,a[5]=y5,a[4]=y4,
   a[3]=y3,a[2]=y2,a[1]=y1,a[0]=y0,
   b[15]=x15,b[14]=x14,b[13]=x13,b[12]=x12,b[11]=x11,b[10]=x10,
   b[9]=x9,b[8]=x8,b[7]=x7,b[6]=x6,b[5]=x5,b[4]=x4,
   b[3]=x3,b[2]=x2,b[1]=x1,b[0]=x0,
   out[15]=g15,out[14]=g14,out[13]=g13,out[12]=g12,out[11]=g11,out[10]=g10,
   out[9]=g9,out[8]=g8,out[7]=g7,out[6]=g6,out[5]=g5,out[4]=g4,
   out[3]=g3,out[2]=g2,out[1]=g1,out[0]=g0);
   
   Mux16(sel=f, a[15]=g15,a[14]=g14,a[13]=g13,a[12]=g12,a[11]=g11,a[10]=g10,
   a[9]=g9,a[8]=g8,a[7]=g7,a[6]=g6,a[5]=g5,a[4]=g4,
   a[3]=g3,a[2]=g2,a[1]=g1,a[0]=g0,
   b[15]=ff15,b[14]=ff14,b[13]=ff13,b[12]=ff12,b[11]=ff11,b[10]=ff10,
   b[9]=ff9,b[8]=ff8,b[7]=ff7,b[6]=ff6,b[5]=ff5,b[4]=ff4,
   b[3]=ff3,b[2]=ff2,b[1]=ff1,b[0]=ff0,
   out[15]=f15,out[14]=f14,out[13]=f13,out[12]=f12,out[11]=f11,out[10]=f10,
   out[9]=f9,out[8]=f8,out[7]=f7,out[6]=f6,out[5]=f5,out[4]=f4,
   out[3]=f3,out[2]=f2,out[1]=f1,out[0]=f0);
   
   //no
   Not16(in[15]=f15,in[14]=f14,in[13]=f13,in[12]=f12,in[11]=f11,in[10]=f10,
   in[9]=f9,in[8]=f8,in[7]=f7,in[6]=f6,in[5]=f5,in[4]=f4,in[3]=f3,
   in[2]=f2,in[1]=f1,in[0]=f0,
   out[15]=nf15,out[14]=nf14,out[13]=nf13,out[12]=nf12,out[11]=nf11,out[10]=nf10,
   out[9]=nf9,out[8]=nf8,out[7]=nf7,out[6]=nf6,out[5]=nf5,out[4]=nf4,
   out[3]=nf3,out[2]=nf2,out[1]=nf1,out[0]=nf0);
   
   Mux16(sel=no, a[15]=f15,a[14]=f14,a[13]=f13,a[12]=f12,a[11]=f11,a[10]=f10,
   a[9]=f9,a[8]=f8,a[7]=f7,a[6]=f6,a[5]=f5,a[4]=f4,
   a[3]=f3,a[2]=f2,a[1]=f1,a[0]=f0,
   b[15]=nf15,b[14]=nf14,b[13]=nf13,b[12]=nf12,b[11]=nf11,b[10]=nf10,
   b[9]=nf9,b[8]=nf8,b[7]=nf7,b[6]=nf6,b[5]=nf5,b[4]=nf4,
   b[3]=nf3,b[2]=nf2,b[1]=nf1,b[0]=nf0,
   out[15]=out15,out[14]=out14,out[13]=out13,out[12]=out12,out[11]=out11,
   out[10]=out10,out[9]=out9,out[8]=out8,out[7]=out7,out[6]=out6,
   out[5]=out5,out[4]=out4,out[3]=out3,out[2]=out2,out[1]=out1,out[0]=out0);
   
   And16(a[15]=out15,a[14]=out14,a[13]=out13,a[12]=out12,a[11]=out11,a[10]=out10,
   a[9]=out9,a[8]=out8,a[7]=out7,a[6]=out6,a[5]=out5,a[4]=out4,
   a[3]=out3,a[2]=out2,a[1]=out1,a[0]=out0,
   b[15]=one,b[14]=one,b[13]=one,b[12]=one,b[11]=one,b[10]=one,
   b[9]=one,b[8]=one,b[7]=one,b[6]=one,b[5]=one,b[4]=one,
   b[3]=one,b[2]=one,b[1]=one,b[0]=one,
   out[15]=out[15],out[14]=out[14],out[13]=out[13],out[12]=out[12],out[11]=out[11],
   out[10]=out[10],out[9]=out[9],out[8]=out[8],out[7]=out[7],out[6]=out[6],
   out[5]=out[5],out[4]=out[4],out[3]=out[3],out[2]=out[2],out[1]=out[1],out[0]=out[0]);
   
   
   //zr
   Or(a=out0, b=zero, out=z0);
   Or(a=out1, b=z0, out=z1);
   Or(a=out2, b=z1, out=z2);
   Or(a=out3, b=z2, out=z3);
   Or(a=out4, b=z3, out=z4);
   Or(a=out5, b=z4, out=z5);
   Or(a=out6, b=z5, out=z6);
   Or(a=out7, b=z6, out=z7);
   Or(a=out8, b=z7, out=z8);
   Or(a=out9, b=z8, out=z9);
   Or(a=out10, b=z9, out=z10);
   Or(a=out11, b=z10, out=z11);
   Or(a=out12, b=z11, out=z12);
   Or(a=out13, b=z12, out=z13);
   Or(a=out14, b=z13, out=z14);
   Or(a=out15, b=z14, out=z15);
   Not(in=z15, out=zr);
   
   //ng
   And(a=out15, b=one, out=ng);
}
